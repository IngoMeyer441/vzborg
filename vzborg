#!/usr/bin/env bash
# vim: set filetype=sh :

# BASH SETTINGS

# Make the script exit when a command fails (set -e).
set -o errexit
# Make the script exit when tries to use undeclared variables (set -u)
set -o nounset
# Exit on pipe fail
set -o pipefail
# set -o xtrace

# USEFUL FUNCTIONS

# trap ctrl-c and call ctrl_c()
trap ctrl_c INT
ctrl_c() {
    echo "** Trapped CTRL-C"
}
say() {
    echo -e vzborg: $1
}
die() {
    say "Error: $1" >&2
    exit 1
}
debug() {
    echo -e "#[DEBUG] $(date "+%F %T") ${1}" >&1
}
version_greater_equal() {
    printf '%s\n%s\n' "$2" "$1" | sort -V -C
}
conn_dict() {
	# return a definition of a bash dictionary, with the components of a connection string
	# warning: supports only full remote paths. Relative or home based paths will not work
	local connection_str=${1}
	# extract the protocol
	local proto="$(echo $connection_str | grep :// | sed -e's,^\(.*://\).*,\1,g')"
	# remove the protocol
	local url=${connection_str/$proto/}
	# extract the user (if any)
	local user="$(echo $url | grep @ | cut -d@ -f1)"
	# extract the host and port
	local hostport="$(echo ${url/$user@/} | cut -d/ -f1)"
	# extract host without port    
	local host="$(echo $hostport | sed -e 's,:.*,,g')"
	# try to extract the port
	local port="$(echo $hostport | sed -e 's,^.*:,:,g' -e 's,.*:\([0-9]*\).*,\1,g' -e 's,[^0-9],,g')"
	# extract the path (if any)
	local path=/"$(echo $url | grep / | cut -d/ -f2-)"

	
	echo "([url]=${url} [proto]=${proto} [user]=${user} [host]=${host} [port]=${port} [path]=${path})"
}
# VZBORG FUNCTIONS

vzborg_backup() {
    if [[ ${show_command_help} = true ]]; then
        echo
        echo "Usage:"
        echo "  vzborg backup -i VMID|VMIDS_LIST|all \\"
        echo "                   [-k KEEP_SETTINGS] \\"
        echo "                   [-m VZDUMP_MODE] \\"
        echo "                   [-n \\"
        echo "                   [-r BORG_REPOSITORY_PATH]"
        echo
        echo "Examples:"
        echo
        echo "  Backup VM 1301 to default borg repository with default mode snapshot"
        echo "    vzborg backup -i 1301"
        echo
        echo "  Backup VM 1301, 204 and 301 to borg repository /var/lib/borgrepo with mode stop"
        echo "    vzborg backup -i '1301 204 301' -r /var/lib/borgrepo -m stop"
        echo
        exit
    fi

    local backup_comment=''
    local backup_compression="--compression=${default_compression}"
    local backup_name=''
    local backup_status=''
    local detail_file="$(mktemp ${temp_dir}/vzborg.XXXXXX)"
    local dump_dir="$(mktemp -d ${temp_dir}/vzborg.XXXXXX)"
    local header_format="\n%2s  %5s  %8s  %6s  %-42s\n"
    local line_format="%2s  %5s  %02d:%02d:%02d  %6s  %-42s\n"
    local summary_file="$(mktemp ${temp_dir}/vzborg.XXXXXX)"
    local vm_config=''
    local vm_ext=''
    local vm_hostname=''
    local vm_type=''

    chmod 755 ${dump_dir}

    echo '' >>${detail_file}
    echo "DETAILED BACKUP INFORMATION" >>${detail_file}
    echo "---------------------------" >>${detail_file}
    echo '' >>${detail_file}

    # Virtual machines IDs
    if [[ $vm_ids = "all" ]]; then
        # containers ids
        local ctids="$(pct list | awk '{print $1}' | grep -v ID )"
        # quemu vm ids
        local vmids="$(qm list | awk '{print $1}' | grep -v ID )"
        # All ids sorted and cleaned in a string
        vm_ids=$(echo -e  "${vmids}\n${ctids}" | sort -n | tr '\n' ' ' | xargs )

    fi

    if [[ ! ${vzborg_repo} == *@* ]]; then
        # Not a remote repository
        # Create the borg repository if the repository does not exist
        if [ ! -d ${vzborg_repo} ]; then
            mkdir -p ${vzborg_repo}
            borg init --encryption=${encryption_mode} ${vzborg_repo}

            echo "Borg repository ${vzborg_repo} with encryption ${encryption_mode} created" >>${detail_file}
            echo "---------------------------" >>${detail_file}
            echo '' >>${detail_file}
        fi
    else
        # it is a remote repository
        # extract connection components with conn_dict function
        declare -A conn_="$(conn_dict ${vzborg_repo})"
        local ssh_port=${conn_[port]:-22}

        if ! ssh -p ${ssh_port} ${conn_[user]}@${conn_[host]} "[ -d ${conn_[path]} ]"; then
            # remote repository does not exist. Create it
            ssh -p ${ssh_port} ${conn_[user]}@${conn_[host]} "mkdir -p ${conn_[path]}"
            borg init --encryption=${encryption_mode} ${vzborg_repo}

            echo "Borg repository ${vzborg_repo} with encryption ${encryption_mode} created" >>${detail_file}
            echo "---------------------------" >>${detail_file}
            echo '' >>${detail_file}
        fi
    fi
    say "Host $(hostname) - Backup started for VM $vm_ids." >>${summary_file}

    printf "$header_format" "TY" "VMID" "TIME" "STATUS" "NAME" >>${summary_file}

    # Loop through each VM ID
    for VM_ID in $vm_ids; do
        if [ -e "${ct_conf_dir}${VM_ID}.conf" ]; then
            #   Is a container
            vm_type='CT'
            vm_ext='tar'
            vm_hostname="$(grep -m 1 ^hostname ${ct_conf_dir}${VM_ID}.conf | awk '{print $2}')"
            vm_config="$(cat ${ct_conf_dir}${VM_ID}.conf )"
        else
            if [ -e "${vm_conf_dir}${VM_ID}.conf" ]; then
                # is a virtual machine
                vm_type='VM'
                vm_ext='vma'
                vm_hostname="$(grep -m 1 ^name ${vm_conf_dir}${VM_ID}.conf | awk '{print $2}')"
                vm_config="$(cat ${vm_conf_dir}${VM_ID}.conf )"
            else
                # unknown vm
                vm_type='--'
                vm_hostname='No_Virtual_Machine_with_this_ID'
                backup_status='failed'
                printf "$line_format" $vm_type $VM_ID 0 0 0 $backup_status $vm_hostname >>${summary_file}
                continue
            fi
        fi

        backup_comment=$(echo -e "--comment=(VM_Type: ${vm_type} VM_Id: ${VM_ID} VM_Hostname: ${vm_hostname})\nBEGIN_CONFIG>\n${vm_config}\n<END_CONFIG")
        backup_name="${archs_prefix}-${VM_ID}-$(date '+%Y_%m_%d-%H_%M_%S').${vm_ext}"

        say "Beginning backup of ${vm_type} ${VM_ID} (${vm_hostname})"
        before="$(date +%s)"
        
        if vzdump ${VM_ID} --dumpdir ${dump_dir} --quiet ${vzdump_quiet} --compress 0 --mode ${vzdump_mode} --stdout | borg create -s "${backup_compression}" "${backup_comment}" ${vzborg_repo}::${backup_name}.tmp - &>>${detail_file}; then
            # rename temporary archive
            borg rename ${vzborg_repo}::${backup_name}.tmp ${backup_name}
            backup_status='ok'
        else
            backup_status='failed'
        fi

        if [[ ${prune_on_backup} = true ]]; then
            vzborg_prune
        fi

        after="$(date +%s)"
        elapsed_seconds="$(expr $after - $before)"
        say "Done."
        printf "$line_format" $vm_type $VM_ID $(($elapsed_seconds / 3600)) $(($elapsed_seconds % 3600 / 60)) $(($elapsed_seconds % 60)) $backup_status $vm_hostname >>${summary_file}
    done

    echo "" >>${summary_file}
    say "Host $(hostname) - Backup complete!" >>${summary_file}
    cat ${summary_file}

    # Append detailed information
    cat ${detail_file} >>${summary_file}

    mail -s "$(hostname) - VzBorg Backup statistics." ${NOTIFY_TO} <${summary_file}
    rm -r ${detail_file} ${summary_file} ${dump_dir}
}
vzborg_delete() {
    if [[ ${show_command_help} = true ]]; then
        echo
        echo "Usage:"
        echo "  vzborg delete -b BACKUP_NAME \\"
        echo "                   [-r BORG_REPOSITORY_PATH]"
        echo
        echo "Examples:"
        echo
        echo "  Delete backup vzdump-1301-2020_03_20-13_18_45.vma"
        echo "  from default borg repository"
        echo "    vzborg delete -b vzdump-1301-2020_03_20-13_18_45.vma"
        echo
        echo "  Delete backup vzdump-141-2020_03_20-13_18_45.tar in repository /mnt/borgrepo"
        echo "    vzborg delete -b vzdump-141-2020_03_20-13_18_45.tar -r /mnt/borgrepo"
        echo
        exit
    fi

    local borg_archive=${backup_name}
    local dump_type=''
    case ${borg_archive} in
    *.tar) dump_type='lxc' ;;
    *.vma) dump_type='qemu' ;;
    *.tmp) dump_type='tmp' ;;
    *) die "Option -b \"${borg_archive}\" is not a valid backup name" ;;
    esac
    # TODO Check if archive borg_archive exist in borg repo.

    say "Deleting backup ${borg_archive} from repository"
    borg delete ${vzborg_repo}::${borg_archive}
}
vzborg_discard() {
    if [[ ${show_command_help} = true ]]; then
        echo
        echo "Usage: vzborg discard [-i IDS_LISTS] \\"
        echo "                   [-r BORG_REPOSITORY]"
        echo
        echo "Examples:"
        echo
        echo "  Discard all backups of VM/CT with Ids 123, 124 and 201 in default repository:"
        echo "    vzborg discard -i '123 124 201'"
        echo
        echo "  Discard (remove) all backups of VM/CT with ID 303 in borg repository /var/lib/vz/borg:"
        echo "    vzborg discard -i 303 -r /var/lib/vz/borg"
        echo
        exit
    fi

    local archives=''
    local borg_format='--format={archive}{SPACE}'

    # Process virtual machines IDs
    if ! [ -z "${vm_ids}" ]; then
        for VM_ID in $vm_ids; do
            archives=$(borg list ${borg_format} "${vzborg_repo}" -P ${archs_prefix}-${VM_ID})
            say "Discarding backups of guest ${VM_ID}"
            for archive in $archives; do
                say "- Deleting ${archive}"
                borg delete "${vzborg_repo}::${archive}"
            done
        done
    fi
}
vzborg_getdump() {
    if [[ ${show_command_help} = true ]]; then
        echo
        echo "Usage:"
        echo "  vzborg getdump -b BACKUP_NAME \\"
        echo "                   [-r BORG_REPOSITORY_PATH] \\"
        echo "                   [-s PVE_STORAGE]"
        echo
        echo "Examples:"
        echo
        echo "  Recreate dump file vzdump-qemu-1301-2020_03_20-13_18_45.vma.lzo"
        echo "  from backup vzdump-1301-2020_03_20-13_18_45.vma"
        echo "  from default borg repository to storage backup"
        echo "    vzborg getdump -b vzdump-1301-2020_03_20-13_18_45.vma -s backup"
        echo
        echo "  Recreate dump file vzdump-lxc-141-2020_03_20-13_18_45.tar.lzo"
        echo "  from backup vzdump-141-2020_03_20-13_18_45.tar in borg repository /mnt/borgrepo"
        echo "  to default storage local"
        echo "    vzborg getdump -b vzdump-141-2020_03_20-13_18_45.tar -r /mnt/borgrepo"
        echo
        exit
    fi

    local borg_archive=${backup_name}
    local compression_level=''
    local dump_dir=''
    local dump_file=''
    local dump_storage=${pve_storage:-local}
    local dump_type=''
    local storage_content=''

    case ${borg_archive} in
    *.tar) dump_type='lxc' ;;
    *.vma) dump_type='qemu' ;;
    *) die "Option -b \"${borg_archive}\" is not a valid backup name" ;;
    esac
    # TODO Check if archive borg_archive exist in borg repo.

    #  Recreate normal proxmox backup file name (add qemu/lxc type to file name)
    dump_file=${borg_archive/${archs_prefix}/vzdump-${dump_type}}

    # Set default compression level
    case ${dump_type} in
    qemu) compression_level=3 ;;
    lxc) compression_level=7 ;;
    esac

    storage_content=$(grep -A 99999 ${dump_storage} /etc/pve/storage.cfg | grep -m1 content | sed -n -e 's/^.*content //p')
    if [[ ! "$storage_content" == *backup* ]]; then
        die "Storage \"${dump_storage}\" is not a backup storage"
    fi

    # Get dumps directory from storage configuration file
    dump_dir=$(grep -A 99999 ${dump_storage} /etc/pve/storage.cfg | grep -m1 path | sed -n -e 's/^.*path //p')/dump

    say "Recreating dump file ${dump_file}.lzo into ${dump_storage} storage"
    borg extract --stdout ${vzborg_repo}::${borg_archive} | lzop -${compression_level} --output=${dump_dir}/${dump_file}.lzo -
    say "Recreation finished"

}
vzborg_help() {
    echo "NAME"
    echo "  vzborg"
    echo
    echo "USAGE"
    echo "  vzborg <COMMAND> [OPTIONS]"
    echo
    echo "DESCRIPTION"
    echo "  vzborg lets you perform and maintain deduplicated, encrypted backups of your Proxmox guests"
    echo "  in local and/or remote repositories"
    echo
    echo "  VzBorg does not use any positional parameters after the <COMMAND>. It only uses options."
    echo "  Specified, but not used options, are ignored."
    echo "  If duplicated options are informed, only the last one is used."
    echo
    echo "COMMANDS"
    echo "  VzBorg must be used with one of the following commands:"
    echo
    echo "     COMMAND  Description"
    echo 
    echo "     backup   Perform a backup job."
    echo "     delete   Delete a specific backup."
    echo "     discard  Discard all backups of given guests."
    echo "     getdump  Recreate a dump file from a backup."
    echo "     help     Show this help, or help about a command."
    echo "     info     Show info about a backup or repository"
    echo "     list     List backups in a repository."
    echo "     prune    Prune (purge) a repository."
    echo "     restore  Restore backup from a repository."
    echo "     version  Show VzBorg, Borg and PVE version."
    echo
    echo "  Hint: Use \"vzborg <COMMAND> -h\" to get specific help about a command"
    echo
    ECHO "OPTIONS"
    echo
    echo "  -b|--backup <BACKUP_NAME>     - Name of an existing backup (archive)."
    echo "                                  use: delete|info|restore"
    echo "  -c|--config <CONFIG_NAME>     - Read configuration file with name CONFIG_NAME"
    echo "                                  use: all except help and version"
    echo "  -d|--dry-run                  - Dry run. Perform simulation"
    echo "                                  use: backup|prune"
    echo "  -f|--force                    - Force overwrite of existing VM/CT"
    echo "                                  use: restore"
    echo "  -h|--help                     - Display command help."
    echo "                                  use: all except help and version"
    echo "  -i|--id <IDS>                 - PVE guest ID, list of PVE guest IDs, or \"all\""
    echo "                                  use: backup|discard|list|restore"
    echo "  -k|--keep <KEEP>              - List of borg keep settings (retention options)."
    echo "                                  use: backup/prune"
    echo "  -m|--mode <MODE>              - vzdump mode <snapshot|stop|suspend> (default=snapshot)."
    echo "                                  use: backup"
    echo "  -n|--do-not-prune             - Do not prune repository during backup"
    echo "                                   use: backup"
    echo "  -r|--repository <REPOSITORY>  - VzBorg repository path."
    echo "                                  use: all except help and version"
    echo "  -s|--storage <STORAGE>        - Proxmox storage (default = local)"
    echo "                                  use: getdump|restore"
    echo "  -o|--output-file <FILE>       - Getdump output file"
    echo "                                  use: getdump"
    echo
    echo "CONFIGURATION"
    echo "  vzborg uses the following configuration file:"
    echo
    echo "  /etc/vzborg/default"
    echo
    echo "    Edit before using vzborg, to customize defaults parameters."
    echo "    Use the comments in the file as a guidance."
    echo
    echo "    You can create and use additional configuration files in the /etc/vzborg directory,"
    echo "    to override when you need, the values from the default config."
    echo "    This additional configuration files can be specified with the option -c|--config"
    echo "    and are processed in the order in which they appear in the command line."
    echo
    echo "VZBORG EXAMPLES"
    echo "    vzborg restore --help"
    echo "    vzborg backup --id '101 102 307'"
    echo "    vzborg backup --id all"
    echo "    vzborg restore --backup vzdump-300-2020_03_20-13_11_46.vma --id 1300 --storage local_lvm"
    echo "    vzborg list"
    echo "    vzborg list -i 303 --repository ssh://example.com:22/mnt/remote_borg_repo"
    echo "    vzborg list -i '1230 1040 2077' -r /mnt/vzborg"
    echo "    vzborg getdump --backup vzdump-lxc-13998-2020_03_20-13_08_35.tar --storage local_lvm"
    echo "    vzborg prune -i '101 102 307'"
    echo "    vzborg prune -i '101 102 307' --keep '--keep-weekly=4 --keep-monthly=6 --keep-yearly=2'"
    echo
    echo "NOTES"
    echo " About VzBorg backup (archive) names:"
    echo
    echo "  VzBorg encodes the guest id and the backup time into the name, for example for a container guest:"
    echo "    vzborg-105-2009_10_09-11_04_43.tar"
    echo "  or for a qemu guest:"
    echo "    vzborg-303-2020_03_27-14_10_12.vma"
}
vzborg_info() {
    if [[ ${show_command_help} = true ]]; then
        echo
        echo "Usage: vzborg info [-b BACKUP_NAME] \\"
        echo "                   [-r BORG_REPOSITORY]"
        echo
        echo "Examples:"
        echo
        echo "  List info about default repository:"
        echo "    vzborg info"
        echo
        echo "  List info of backup vzdump-lxc-13998-2020_03_20-13_08_35.tar in borg repository /var/lib/vz/borg:"
        echo "    vzborg info -b vzdump-lxc-13998-2020_03_20-13_08_35.tar -r /var/lib/vz/borg"
        echo
        exit
    fi
    # Set a default list format 
    local list_format='{bcomment}{NL}'
    local list_file="$(mktemp ${temp_dir}/vzborg.XXXXXX)"

    if ! [ -z "${backup_name}" ]; then    
        local borg_format="--format=${list_format}"
        echo -e "\nBackup Information" >${list_file}
        echo -e "------------------\n" >>${list_file}
        borg info "${vzborg_repo}::${backup_name}" | sed "/BEGIN_CONFIG>/,/<END_CONFIG/d"  >>${list_file}
        # Extract config file info from comment in archive
        echo -e "\nVM Configuration File:" >>${list_file}
        echo -e "----------------------\n" >>${list_file}
        borg list "${borg_format}" "${vzborg_repo}" -P "${backup_name}" | sed -n '/BEGIN_CONFIG>/,/<END_CONFIG/{ /_CONFIG/d; p }'  >>${list_file}
    else
        echo -e "\nRepository Information" >${list_file}
        echo -e "----------------------\n" >>${list_file} 
        borg info "${vzborg_repo}"  >>${list_file}
    fi

    cat ${list_file}
    rm ${list_file}
}
vzborg_list() {
    if [[ ${show_command_help} = true ]]; then
        echo
        echo "Usage: vzborg list [-i VMID|VMIDS_LIST] \\"
        echo "                   [-r BORG_REPOSITORY]"
        echo
        echo "Examples:"
        echo
        echo "  List all backups in default repository:"
        echo "    vzborg list"
        echo
        echo "  List backups of VM/CT with ID 303 in borg repository /var/lib/vz/borg:"
        echo "    vzborg list -i 303 -r /var/lib/vz/borg"
        echo
        exit
    fi
    # Set a default list format 
    local list_format='{archive} {bcomment}{NL}'
    local borg_format="--format=${list_format}"

    local list_file="$(mktemp ${temp_dir}/vzborg.XXXXXX)"

    # Virtual machines IDs
    if ! [ -z "${vm_ids}" ]; then
        for VM_ID in $vm_ids; do
            borg list "${borg_format}" "${vzborg_repo}" -P "${archs_prefix}-${VM_ID}-" >>${list_file}
        done
    else
        borg list "${borg_format}" "${vzborg_repo}" -P ${archs_prefix}- >>${list_file}
    fi
    # Remove configuration file info and sort by archive name
    cat ${list_file} | sed "/BEGIN_CONFIG>/,/<END_CONFIG/d" | sort
    rm ${list_file}
}
vzborg_prune() {
    if [[ ${show_command_help} = true ]]; then
        echo
        echo "Usage:"
        echo "  vzborg prune -i VMID|VMIDS_LIST|all \\"
        echo "                   [-r BORG_REPOSITORY_PATH] \\"
        echo "                   [-k KEEP_SETTINGS]"
        echo
        echo "Examples:"
        echo
        echo
        exit
    fi

    local retention=${keep_setting:-$DEFAULT_KEEP}

    # Prune all backups
    if [[ $vm_ids = "all" ]]; then
        vm_ids=$(vzborg list -r ${vzborg_repo} | grep ${archs_prefix}- | cut -d"-" -f2 | cut -d"-" -f1 | sort | uniq | tr '\n' ' ')
    fi

    # Loop through each ID
    for VM_ID in $vm_ids; do
        vm_type=''
        if [ -e "${ct_conf_dir}${VM_ID}.conf" ]; then
            #   Is a container
            vm_type='CT'
            vm_hostname="$(grep -m 1 ^hostname ${ct_conf_dir}${VM_ID}.conf | awk '{print $2}')"
        else
            if [ -e "${vm_conf_dir}${VM_ID}.conf" ]; then
                # is a virtual machine
                vm_type='VM'
                vm_hostname="$(grep -m 1 ^name ${vm_conf_dir}${VM_ID}.conf | awk '{print $2}')"
            else
                # unknown vm
                vm_type='--'
                vm_hostname='No_Virtual_Machine_with_this_ID'
            fi
        fi

        say "Prunning repository of backups of VM/CT ${VM_ID} (${vm_hostname})"
        say "using ${retention} retention options"
        borg prune -v --list --stats ${dry_run} ${retention} --prefix ${archs_prefix}-${VM_ID} ${vzborg_repo}
    done
    say "Prunning finished"

}
vzborg_restore() {
    if [[ ${show_command_help} = true ]]; then
        echo
        echo "Usage:"
        echo "  vzborg restore -b BACKUP_NAME -i PVE_ID_FOR_RESTORE \\"
        echo "                   [-f] \\"
        echo "                   [-r BORG_REPOSITORY_PATH] \\"
        echo "                   [-s pve_storage]"
        echo
        echo "Examples:"
        echo
        echo "  Restore VM 1301 from backup vzdump-1301-2020_03_20-13_18_45.vma"
        echo "  from default borg repository with id 1432 to storage local_lvme"
        echo "  forcing overwrite if VM 1432 exists:"
        echo "    vzborg restore -b vzdump-1301-2020_03_20-13_18_45.vma -s local-lvm -i 1432 -f"
        echo
        echo "  Restore CT 141 from backup vzdump-141-2020_03_20-13_18_45.tar"
        echo "  in borg repository /mnt/borgrepo"
        echo "  with id 304 to default storage local"
        echo "  without forcing overwrite:"
        echo "    vzborg restore -b vzdump-141-2020_03_20-13_18_45.tar -r /mnt/borgrepo -i 304"
        echo
        exit
    fi

    local restore_storage=${pve_storage:-local}
    local borg_archive=${backup_name}
    local restore_id=${vm_ids:-0}
    local vm_type=''
    local guest_config=''
    local guest_has_mount_points=false
    local rootfs_size=32
    local unprivileged=0

    # TODO Check if archive borg_archive exist in borg repo.
    # Get storage allowed content
    storage_content=$(grep -A 99999 ${restore_storage} /etc/pve/storage.cfg | grep -m1 content | sed -n -e 's/^.*content //p')

    case ${borg_archive} in
    *.tar) 
        if [[ ! "$storage_content" == *rootdir* ]]; then
            die "Storage \"${restore_storage}\" is not a containers storage"
        fi
        vm_type='CT'
        guest_config="$( borg list --format='{bcomment}' "${vzborg_repo}" -P "${backup_name}" | sed -n '/BEGIN_CONFIG>/,/<END_CONFIG/{ /_CONFIG/d; p }')"
        if echo "${guest_config}" | grep -q '^mp.:'; then
            # container has mount points, better restore it using intermediate dump file
            guest_has_mount_points=true
        else
            # find root file system size
            rootfs_size=$( echo "${guest_config}" | sed -n 's/^rootfs:.*size=\([0-9]*\).*/\1/p')
            # check if it is an unprivileged container
            if echo "${guest_config}" | grep -q '^unprivileged: 1'; then
                unprivileged=1
            fi
        fi
        ;;
    *.vma) 
        if [[ ! "$storage_content" == *images* ]]; then
            die "Storage \"${restore_storage}\" is not an images storage"
        fi
       vm_type='VM' ;;
    *) die "Option -b \"${borg_archive}\" is not a qemu or lxc valid backup file name" ;;
    esac

    if ((${restore_id} >= 101 && ${restore_id} <= 999999999)); then
        say "Restoring vzdump backup file ${borg_archive} as ${vm_type} ${restore_id} to storage ${restore_storage}"
        if [[ ${vm_type} == 'VM' ]]; then
            borg extract --stdout ${vzborg_repo}::${borg_archive} | qmrestore - ${restore_id} --storage ${restore_storage} ${force_overwrite}
        else
            if [[ ${guest_has_mount_points} = true ]]; then
                echo 'restoring to temporary file'
                local temp_dump_dir="$(mktemp -d ${temp_dir}/vzborg.XXXXXX)"
                local dump_file=${borg_archive/${archs_prefix}/vzdump-lxc}
                borg extract --stdout ${vzborg_repo}::${borg_archive} | lzop -5 --output=${temp_dump_dir}/${dump_file}.lzo -
                pct restore ${restore_id} ${temp_dump_dir}/${dump_file}.lzo --storage ${restore_storage} ${force_overwrite}
                rm -r ${temp_dump_dir}
            else
                borg extract --stdout ${vzborg_repo}::${borg_archive} | pct restore ${restore_id} --storage ${restore_storage} ${force_overwrite} --rootfs ${rootfs_size} --unprivileged ${unprivileged} -
            fi
        fi
        say "Restore finished"
    else
        die "Option -i \"${restore_id}\" is not a valid VM/CT ID"
    fi
}
vzborg_version() {
    echo 'vzborg 0.6.0'
    borg --version
    pveversion
    # 0.3.1 (alfa)
    #   tested in proxmox 6.X
    # 0.3.2 (alfa)
    #   tested in proxmox 5.x
    # 0.4.0 (alfa)
    #   installation script
    #   sane defaults
    # 0.5.0 (alfa)
    #   getdump, list commands
    #   
    # 0.6.0 (alfa)
    #   store and show VM original conf file
    #   more info on borg comment field
    #   
    # 0.7.0 (alfa)
    #   backup server configuration (ommited functionality)
    # 0.8.0 (alfa)
    #   basic debian package
    #   automated tests
    #   updated and reformated help
    # 0.9 (beta)
    #   ask for contributions
    #   internationalization
    #   internationalization spanish
    # 1.0 
}

# VzBorg main body

# variables initialization
readonly archs_prefix=vzborg
backup_name=''
dry_run=''
force_overwrite=''
output_file=''
prune_on_backup=true
show_command_help=false
vm_ids=''
vzborg_command=''
vzdump_mode='snapshot'
vzdump_quiet=1

# Containers configuration directory
ct_conf_dir="/etc/pve/nodes/`hostname`/lxc/"
# Qemu virtual machines configuration directory
vm_conf_dir="/etc/pve/nodes/`hostname`/qemu-server/"


# Load variables from default configuration file
. /etc/vzborg/default

# First parameter must be vzborg command
vzborg_command=${1}
shift 1
# Options parser
while [ $# -gt 0 ]; do
    case "$1" in
    -b | --backup)
        backup_name="$2"
        shift 2
        ;;
    -c | --command)
        vzborg_command="$2"
        shift 2
        ;;
    -C | --config)
        . /etc/vzborg/${2}
        shift 2
        ;;
    -d | --dry-run)
        dry_run="--dry-run"
        shift 1
        ;;
    -f | --force)
        force_overwrite="--force yes"
        shift 1
        ;;
    -h | --help)
        show_command_help=true
        shift 1
        ;;
    -i | --id)
        vm_ids="$2"
        shift 2
        ;;
    -k | --keep)
        keep_setting="$2"
        shift 2
        ;;
    -m | --mode)
        vzdump_mode="$2"
        shift 2
        ;;
    -n | --do-not-prune)
        prune_on_backup=false
        shift 1
        ;;
    -r | --repository)
        vzborg_repo="$2"
        shift 2
        ;;
    -s | --storage)
        pve_storage="$2"
        shift 2
        ;;
    -o | --output-file)
        output_file="$2"
        shift 2
        ;;
    *)
        die "Invalid option \"$1\". Try vzborg help"
        ;;
    esac
done

# if VZBORG_PASSPHRASE is defined, export it as Borg BORG_PASSPHRASE
if [[ ! -z ${VZBORG_PASSPHRASE:-''} ]]; then
    export BORG_PASSPHRASE="${VZBORG_PASSPHRASE}"
fi

# Assign defaults to vzborg conf variables if not defined
default_compression=${default_compression:-'zstd,3'}
default_keep=${default_keep:-'--keep-daily=2 --keep-weekly=4 --keep-monthly=12 --keep-yearly=2'}
encryption_mode=${encryption_mode:-'repokey-blake2'}
temp_dir=${vzborg_temp_dir:-'/tmp'}
vzborg_repo=${vzborg_repo:-'/var/lib/vz/vzborg'}

# Execute command function
case ${vzborg_command} in
backup) vzborg_backup ;;
delete) vzborg_delete ;;
discard) vzborg_discard ;;
getdump) vzborg_getdump ;;
help) vzborg_help ;;
info) vzborg_info ;;
list) vzborg_list ;;
prune) vzborg_prune ;;
restore) vzborg_restore ;;
version) vzborg_version ;;
*) die "Invalid or not given vzborg command. Try vzborg help" ;;
esac